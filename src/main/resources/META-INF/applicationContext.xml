<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.3.xsd     
          http://www.springframework.org/schema/context     
          http://www.springframework.org/schema/context/spring-context-4.3.xsd     
          http://www.springframework.org/schema/aop     
          http://www.springframework.org/schema/aop/spring-aop-4.3.xsd     
          http://www.springframework.org/schema/task
          http://www.springframework.org/schema/task/spring-task-4.3.xsd"
       default-lazy-init="false">
    <!--<context:property-placeholder location="classpath:config/*.properties"/>-->
    <!--开启这个配置，spring识别@Scheduled注解 -->
    <task:annotation-driven/>
    <!-- -->
    <context:component-scan base-package="com.ninelephas.alopex,com.ninelephas.fabric.sdk.service"/>
    <!-- 激活自动代理功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- -->

    <!--jedis的连接池配置  begin-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大空闲连接数量 -->
        <property name="maxIdle" value="300"/>
        <!-- 最小空闲连接数量, 处理间隔时间为 timeBetweenEvictionRunsMillis -->
        <property name="minIdle" value="100"/>
        <!-- 池中持有的最大连接数量 -->
        <property name="maxTotal" value="1000"/>
        <!-- borrowObject 方法的最大等待时间 -->
        <property name="maxWaitMillis" value="1000"/>
        <!-- 池中可用资源耗尽时, borrow 方法是否阻塞等待 maxWaitMillis 毫秒 -->
        <property name="blockWhenExhausted" value="true"/>
        <!-- borrowObject 时是否执行检测 -->
        <property name="testOnBorrow" value="true"/>
        <!-- 是否检测空闲连接链接的有效性, 间隔时间为 timeBetweenEvictionRunsMillis -->
        <property name="testWhileIdle" value="true"/>
        <!-- 空闲对象被清除需要达到的最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="1000"/>
        <!-- 空闲检测线程,sleep 间隔多长时间,去处理与idle相关的事情 -->
        <property name="timeBetweenEvictionRunsMillis" value="1000"/>
    </bean>
    <!--jedis的连接池配置  end-->

    <!-- jedis的连接工厂 begin-->
    <bean id="connectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="192.168.1.120"/>
        <property name="port" value="16379"/>
        <property name="database" value="2"/>
        <property name="password" value="1qaz369*"/>
        <property name="timeout" value="2000"/>
        <!-- <property name="poolConfig" value="poolConfig"/> -->
    </bean>
    <!-- jedis的连接工厂 end-->

    <!--redis实际使用的template -->
    <!-- 类似于spring提供的HibernateDaoSupport -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer">
            <bean
                    class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <!-- <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"
                /> -->
            <!-- <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"
                /> -->
            <bean
                    class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
    </bean>
    <!-- end -->


    <!-- 配置_Druid和Spring关联监控配置 begin -->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut"
          class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.ninelephas.alopex.service.*</value>
                <value>com.ninelephas.alopex.controller.*</value>
                <value>com.ninelephas.alopex.dispatcher.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut"/>
    </aop:config>
    <!-- 配置_Druid和Spring关联监控配置 end-->

</beans>
